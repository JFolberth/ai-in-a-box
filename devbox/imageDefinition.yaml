$schema: "1.0"
name: "ai-foundry-spa-devbox"
image: microsoftvisualstudio_visualstudioplustools_vs-2022-ent-general-win11-m365-gen2
tasks:
  - name: winget
    description: Install Node.js LTS for frontend development
    parameters:
      package: OpenJS.NodeJS.LTS
  - name: winget
    description: Install Visual Studio Code for development
    parameters:
      package: Microsoft.VisualStudioCode
  - name: winget
    description: Install Azure CLI for infrastructure deployment
    parameters:
      package: Microsoft.AzureCLI
  - name: winget
    description: Install Git for source control
    parameters:
      package: Git.Git
  - name: winget
    description: Install .NET 8 SDK for Azure Functions backend
    parameters:
      package: Microsoft.DotNet.SDK.8
  - name: winget
    description: Install Azure Functions Core Tools for local development
    parameters:
      package: Microsoft.AzureFunctionsCoreTools
  - name: winget
    description: Install Python for development scripting and tooling
    parameters:
      package: Python.Python.3.12
  - name: winget
    description: Install PowerShell Core for cross-platform scripting
    parameters:
      package: Microsoft.PowerShell
  - name: winget
    description: Install Docker Desktop for containerized development
    parameters:
      package: Docker.DockerDesktop
  - name: powershell
    description: Install Azure CLI extensions system-wide
    parameters:
      command: |
        # Install Azure CLI Bicep extension (system-wide)
        az extension add --name bicep --only-show-errors
        # Install Azure CLI DevCenter extension (system-wide)
        az extension add --name devcenter --only-show-errors
        Write-Host "System-level setup complete!" -ForegroundColor Green
userTasks:
  - name: powershell
    description: Install VS Code extensions for AI Foundry SPA development
    parameters:
      command: |
        # Install VS Code extensions for the user
        Write-Host "Installing VS Code extensions..." -ForegroundColor Yellow
        
        # Infrastructure & Deployment
        code --install-extension ms-vscode.vscode-bicep
        
        # Backend Development (C# Function App)
        code --install-extension ms-azuretools.vscode-azurefunctions
        code --install-extension ms-dotnettools.csharp
        code --install-extension ms-dotnettools.vscode-dotnet-runtime
        
        # Frontend Development (JavaScript/Vite)
        code --install-extension esbenp.prettier-vscode
        code --install-extension ms-vscode.vscode-eslint
        code --install-extension ms-vscode.vscode-json
        
        # AI Development & Copilot
        code --install-extension GitHub.copilot
        code --install-extension GitHub.copilot-chat
        code --install-extension ms-toolsai.vscode-ai-toolkit
        
        # Python Development (for tooling and scripting)
        code --install-extension ms-python.python
        code --install-extension ms-python.pylint
        
        # DevBox Support
        code --install-extension ms-vscode.vscode-dev-containers
        
        # Docker Development
        code --install-extension ms-azuretools.vscode-docker
        code --install-extension ms-vscode.vscode-docker
        
        # Source Control
        code --install-extension github.vscode-github-actions
        
        Write-Host "VS Code extensions installed successfully!" -ForegroundColor Green
  
  - name: powershell
    description: Configure user-specific development environment and tools
    parameters:
      command: |
        # Install npm global packages for the current user
        npm install -g azurite@latest
        
        # Note: @azure/static-web-apps-cli and azure-functions-core-tools are installed on-demand by deployment scripts
        # This avoids duplication and ensures tools are available when needed
        
        # Verify Azure Functions Core Tools is available
        if (Get-Command func -ErrorAction SilentlyContinue) {
            $funcVersion = func --version
            Write-Host "‚úÖ Azure Functions Core Tools found: $funcVersion" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  Azure Functions Core Tools not found via PATH" -ForegroundColor Yellow
            Write-Host "   It may be installed but not in PATH, or you may need to install it" -ForegroundColor Gray
        }
        
        # Create user workspace directories
        $workspaceDir = "$env:USERPROFILE\Workspaces"
        $azuriteDir = "$env:USERPROFILE\.azurite"
        
        New-Item -ItemType Directory -Force -Path $workspaceDir
        New-Item -ItemType Directory -Force -Path $azuriteDir
        
        # Set up user-specific environment variables
        [Environment]::SetEnvironmentVariable("AZURE_STORAGE_EMULATOR_LOCATION", $azuriteDir, "User")
        
        # Configure npm registry for user
        npm config set registry https://registry.npmjs.org/
        
        # Configure Python for user development
        python -m pip install --user --upgrade pip
        python -m pip install --user virtualenv
        
        # Verify Docker Desktop installation and setup
        $dockerPath = "${env:ProgramFiles}\Docker\Docker\Docker Desktop.exe"
        if (Test-Path $dockerPath) {
            Write-Host "‚úÖ Docker Desktop installed successfully!" -ForegroundColor Green
            Write-Host "üìã Docker will be available after DevBox restart and Docker Desktop startup" -ForegroundColor Yellow
        } else {
            Write-Host "‚ö†Ô∏è  Docker Desktop installation may need completion" -ForegroundColor Yellow
        }
        
        Write-Host "=== User Development Environment Setup Complete ===" -ForegroundColor Green
        Write-Host "Next steps:" -ForegroundColor Yellow
        Write-Host "1. Configure Git with your credentials:" -ForegroundColor Gray
        Write-Host "   git config --global user.name 'Your Name'" -ForegroundColor Gray
        Write-Host "   git config --global user.email 'your.email@example.com'" -ForegroundColor Gray
        Write-Host "2. Sign in to Azure: az login" -ForegroundColor Gray
        Write-Host "3. Clone repository to: $workspaceDir" -ForegroundColor Gray
        Write-Host "4. Azurite data will be stored in: $azuriteDir" -ForegroundColor Gray
        Write-Host "5. Python and pip are available for development tooling" -ForegroundColor Gray
        Write-Host "6. Start Docker Desktop for containerized development" -ForegroundColor Gray
        Write-Host "7. Docker will be available for Azurite, Function App testing, and more" -ForegroundColor Gray
