#!/usr/bin/env pwsh
<#
.SYNOPSIS
Deploy the frontend of AI Foundry SPA to Azure Static Web App

.DESCRIPTION
This script deploys the frontend portion of the AI Foundry SPA to an existing Azure Static Web App.
Both StaticWebAppName and ResourceGroupName are required parameters.

This script uses the same deployment method as the CI pipeline: first tries az staticwebapp create
with --source, then falls back to SWA CLI if that fails (because the app already exists).

For local development, use 'npm run dev' instead.

.PARAMETER StaticWebAppName
The name of the Azure Static Web App to deploy to. Required.

.PARAMETER ResourceGroupName
The name of the resource group containing the Static Web App. Required.

.PARAMETER BackendUrl
The backend Function App URL to configure (optional - will update .env for dev environment)

.PARAMETER SkipBuild
Skip the npm build step if the application is already built

.EXAMPLE
./deploy-frontend-spa-code.ps1 -StaticWebAppName "stapp-aibox-fd-dev-eus2" -ResourceGroupName "rg-ai-foundry-spa-frontend-dev-eus2"

.EXAMPLE
./deploy-frontend-spa-code.ps1 -StaticWebAppName "stapp-aibox-fd-dev-eus2" -ResourceGroupName "rg-ai-foundry-spa-frontend-dev-eus2" -BackendUrl "https://func-ai-foundry-spa-backend-dev-eus2.azurewebsites.net/api"

.EXAMPLE
./deploy-frontend-spa-code.ps1 -StaticWebAppName "my-custom-static-web-app" -ResourceGroupName "my-rg" -SkipBuild
#>

param(
    [Parameter(Mandatory = $true)]
    [string]$StaticWebAppName,
    
    [Parameter(Mandatory = $true)]
    [string]$ResourceGroupName,
    
    [Parameter(Mandatory = $false)]
    [string]$BackendUrl,
    
    [Parameter(Mandatory = $false)]
    [switch]$SkipBuild
)

# Set error action preference
$ErrorActionPreference = "Stop"

# Refresh environment variables to ensure PATH is updated
$env:PATH = [System.Environment]::GetEnvironmentVariable("PATH", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH", "User")

Write-Host "üöÄ AI Foundry SPA - Frontend Deployment" -ForegroundColor Green -BackgroundColor Black
Write-Host "=======================================" -ForegroundColor Green

# Change to project root (go up one level from deploy-scripts)
Set-Location (Join-Path $PSScriptRoot "..")

# Check if Azure CLI is installed and logged in
Write-Host "üîç Checking Azure CLI authentication..." -ForegroundColor Yellow
try {
    $account = az account show --output json 2>$null | ConvertFrom-Json
    Write-Host "‚úÖ Azure CLI authenticated as: $($account.user.name)" -ForegroundColor Green
    Write-Host "üìã Subscription: $($account.name) ($($account.id))" -ForegroundColor Cyan
} catch {
    Write-Error "‚ùå Azure CLI not authenticated. Please run 'az login' first."
    exit 1
}

Write-Host "‚òÅÔ∏è Deploying to Azure Static Web App" -ForegroundColor Yellow
Write-Host "   Target Static Web App: $StaticWebAppName" -ForegroundColor Cyan
Write-Host "   Target Resource Group: $ResourceGroupName" -ForegroundColor Cyan

# Verify the Static Web App exists
Write-Host "üîç Verifying Static Web App '$StaticWebAppName' in resource group '$ResourceGroupName'..." -ForegroundColor Yellow
try {
    $staticWebApp = az staticwebapp show --name $StaticWebAppName --resource-group $ResourceGroupName --output json | ConvertFrom-Json
    Write-Host "‚úÖ Static Web App found: $($staticWebApp.name)" -ForegroundColor Green
} catch {
    Write-Error "‚ùå Static Web App '$StaticWebAppName' not found in resource group '$ResourceGroupName'!"
    Write-Host "üí° To create the infrastructure first, run:" -ForegroundColor Yellow
    Write-Host "   az deployment sub create --template-file infra/main-orchestrator.bicep --parameters infra/dev-orchestrator.parameters.bicepparam --location eastus2" -ForegroundColor White
    exit 1
}

# Update environment configuration for dev environment
Write-Host "üîß Updating frontend configuration for dev environment..." -ForegroundColor Yellow

# Create dev environment file with hardcoded dev values
$envContent = @"
# Dev Environment Configuration - Generated by deployment script
VITE_BACKEND_URL=$($BackendUrl -replace '^$', 'http://localhost:7071/api')
VITE_USE_BACKEND=true
VITE_PUBLIC_MODE=false

# AI Foundry Configuration (Dev Environment)
VITE_AI_FOUNDRY_AGENT_NAME=AI in A Box
VITE_AI_FOUNDRY_AGENT_ID=asst_dH7M0nbmdRblhSQO8nIGIYF4
VITE_AI_FOUNDRY_PROJECT_URL=https://ai-foundry-dev-eus.services.ai.azure.com/api/projects/firstProject
VITE_AI_FOUNDRY_ENDPOINT=https://ai-foundry-dev-eus.azureml.net
VITE_AI_FOUNDRY_DEPLOYMENT=gpt-4

# Azure Static Web App Configuration
VITE_STATIC_WEB_APP_NAME=$StaticWebAppName

# Environment Settings
VITE_ENV=dev
NODE_ENV=development
"@

Set-Content -Path "src/frontend/.env.dev" -Value $envContent
Write-Host "‚úÖ Dev environment configuration created" -ForegroundColor Green

# Build frontend if not skipped
if (-not $SkipBuild) {
    Write-Host "üî® Building frontend application for dev environment..." -ForegroundColor Yellow
    
    # Navigate to frontend directory
    Push-Location "src/frontend"
    try {
        # Install dependencies
        Write-Host "üì¶ Installing dependencies..." -ForegroundColor Cyan
        npm install
        if ($LASTEXITCODE -ne 0) {
            Write-Error "‚ùå npm install failed!"
            exit 1
        }
        
        # Build the application for dev environment
        Write-Host "üèóÔ∏è Building application for dev..." -ForegroundColor Cyan
        $env:NODE_ENV = "development"
        
        # Try the dev build script first, fall back to standard build if it fails
        npm run build:dev
        if ($LASTEXITCODE -ne 0) {
            Write-Warning "‚ö†Ô∏è Dev build failed, trying standard build..."
            npm run build
        }
        
        if ($LASTEXITCODE -ne 0) {
            Write-Error "‚ùå Frontend build failed!"
            exit 1
        }
        
        Write-Host "‚úÖ Frontend build completed for dev environment!" -ForegroundColor Green
    } finally {
        Pop-Location
    }
} else {
    Write-Host "‚è≠Ô∏è Skipping frontend build..." -ForegroundColor Yellow
}

# Verify the build output exists
$buildPath = "src/frontend/dist"
if (-not (Test-Path $buildPath)) {
    Write-Error "‚ùå Build output not found at '$buildPath'! Please build the application first."
    exit 1
}

Write-Host "üìÅ Using build output from: $buildPath" -ForegroundColor Cyan

# Deploy to Static Web App using Azure CLI (same method as CI)
Write-Host "üöÄ Deploying frontend files to Azure Static Web App using Azure CLI..." -ForegroundColor Yellow

# Try deploying using az staticwebapp create with --source (same as CI)
Write-Host "üì¶ Attempting deployment with az staticwebapp create..." -ForegroundColor Cyan
Write-Host "   Static Web App: $StaticWebAppName" -ForegroundColor Gray
Write-Host "   Resource Group: $ResourceGroupName" -ForegroundColor Gray
Write-Host "   Source Path: $buildPath" -ForegroundColor Gray

try {
    # First try: Use az staticwebapp create with --source (this will fail if it exists, but might work for deployment)
    az staticwebapp create --name $StaticWebAppName --resource-group $ResourceGroupName --source $buildPath --location $ResourceGroupName --branch "main" --token "$env:GITHUB_TOKEN" 2>$null
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Deployment completed successfully with az staticwebapp create!" -ForegroundColor Green
        $deploymentSuccess = $true
    } else {
        Write-Host "‚ÑπÔ∏è  az staticwebapp create failed (likely because app exists), trying deployment to existing app..." -ForegroundColor Yellow
        $deploymentSuccess = $false
    }
}
catch {
    Write-Host "‚ÑπÔ∏è  az staticwebapp create failed, trying deployment to existing app..." -ForegroundColor Yellow
    $deploymentSuccess = $false
}

# If create failed (because app exists), deploy to existing using SWA CLI
if (-not $deploymentSuccess) {
    Write-Host "üì¶ Deploying to existing Static Web App using SWA CLI..." -ForegroundColor Cyan
    
    # Get deployment token for the Static Web App
    Write-Host "üîë Getting deployment token..." -ForegroundColor Cyan
    $deploymentToken = az staticwebapp secrets list --name $StaticWebAppName --resource-group $ResourceGroupName --query "properties.apiKey" --output tsv
    
    if ($LASTEXITCODE -ne 0 -or [string]::IsNullOrEmpty($deploymentToken)) {
        Write-Error "‚ùå Failed to get deployment token for Static Web App!"
        exit 1
    }
    
    try {
        # Ensure npm global packages are in PATH
        $npmGlobalPath = npm config get prefix
        if ($npmGlobalPath -and -not $env:PATH.Contains($npmGlobalPath)) {
            $env:PATH = "$npmGlobalPath;" + $env:PATH
            Write-Host "‚úÖ Added npm global path to PATH: $npmGlobalPath" -ForegroundColor Green
        }
        
        # Check if SWA CLI is already installed
        Write-Host "üîç Checking for SWA CLI..." -ForegroundColor Cyan
        $swaVersion = swa --version 2>$null
        if ($LASTEXITCODE -eq 0 -and -not [string]::IsNullOrEmpty($swaVersion)) {
            Write-Host "‚úÖ SWA CLI already installed (version: $swaVersion)" -ForegroundColor Green
        } else {
            # Install SWA CLI if not found
            Write-Host "üì¶ Installing SWA CLI..." -ForegroundColor Cyan
            npm install -g @azure/static-web-apps-cli
            
            if ($LASTEXITCODE -ne 0) {
                Write-Error "‚ùå Failed to install SWA CLI!"
                exit 1
            }
            
            # Verify SWA CLI is accessible after installation
            $swaVersion = swa --version 2>$null
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ SWA CLI installed successfully (version: $swaVersion)" -ForegroundColor Green
            } else {
                Write-Error "‚ùå SWA CLI installed but not accessible!"
                exit 1
            }
        }
        
        # Deploy using SWA CLI (same as CI)
        Write-Host "üöÄ Deploying with SWA CLI..." -ForegroundColor Cyan
        swa deploy --app-location $buildPath --deployment-token $deploymentToken --env "default"
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Deployment completed successfully with SWA CLI!" -ForegroundColor Green
            $deploymentSuccess = $true
        } else {
            Write-Error "‚ùå SWA CLI deployment failed!"
            $deploymentSuccess = $false
        }
    }
    catch {
        Write-Host "‚ùå SWA CLI deployment failed" -ForegroundColor Red
        Write-Host "   Error: $($_.Exception.Message)" -ForegroundColor Gray
        $deploymentSuccess = $false
    }
}

if (-not $deploymentSuccess) {
    Write-Host ""
    Write-Host "‚ùå All deployment methods failed!" -ForegroundColor Red
    Write-Host ""
    Write-Host "üõ†Ô∏è  Troubleshooting tips:" -ForegroundColor Yellow
    Write-Host "   1. Verify the Static Web App exists and is accessible" -ForegroundColor White
    Write-Host "   2. Check your permissions on the Static Web App resource" -ForegroundColor White
    Write-Host "   3. Ensure the build output exists at: $buildPath" -ForegroundColor White
    Write-Host "   4. Check Azure CLI authentication: az account show" -ForegroundColor White
    Write-Host "   5. Verify Node.js is installed for SWA CLI" -ForegroundColor White
    Write-Host "   6. Try deploying via Azure Portal as an alternative" -ForegroundColor White
    Write-Host ""
    Write-Host "üîß Alternative deployment options:" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ Use GitHub Actions for CI/CD deployment" -ForegroundColor White
    Write-Host "   ‚Ä¢ Deploy via Visual Studio Code Azure Static Web Apps extension" -ForegroundColor White
    Write-Host "   ‚Ä¢ Use Azure Portal manual upload" -ForegroundColor White
    Write-Host ""
    Write-Error "‚ùå Failed to deploy to Static Web App!"
    exit 1
}

Write-Host "‚úÖ Frontend files deployed successfully!" -ForegroundColor Green

# Get the static web app URL
Write-Host "üîó Retrieving Static Web App URL..." -ForegroundColor Yellow
$staticWebsiteUrl = "https://$($staticWebApp.defaultHostname)"

# Clean up temporary dev env file
if (Test-Path "src/frontend/.env.dev") {
    Remove-Item "src/frontend/.env.dev" -Force
}

# Final summary
Write-Host ""
Write-Host "üéâ Frontend deployment completed successfully! üéâ" -ForegroundColor Green -BackgroundColor Black
Write-Host ""
Write-Host "üìã Deployment Summary:" -ForegroundColor Cyan
Write-Host "   Static Web App: $StaticWebAppName" -ForegroundColor White
Write-Host "   Resource Group: $ResourceGroupName" -ForegroundColor White
Write-Host "   Static Web App URL: $staticWebsiteUrl" -ForegroundColor White
Write-Host ""
Write-Host "üåç Your AI Foundry SPA is now live at:" -ForegroundColor Green
Write-Host "   $staticWebsiteUrl" -ForegroundColor Yellow -BackgroundColor DarkBlue
Write-Host ""

Write-Host "üìã Configuration:" -ForegroundColor Cyan
Write-Host "   Backend URL: $($BackendUrl -replace '^$', 'http://localhost:7071/api (local dev)')" -ForegroundColor White
Write-Host "   AI Foundry: ai-foundry-dev-eus (dev environment)" -ForegroundColor White
Write-Host ""

Write-Host "‚ú® Frontend deployment complete! ‚ú®" -ForegroundColor Green
