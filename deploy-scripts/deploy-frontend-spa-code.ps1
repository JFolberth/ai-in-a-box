#!/usr/bin/env pwsh
<#
.SYNOPSIS
Deploy the frontend of AI Foundry SPA to Azure Static Web App

.DESCRIPTION
This script deploys the frontend portion of the AI Foundry SPA to an existing Azure Static Web App.
Both StaticWebAppName and ResourceGroupName are required parameters.

For local development, use 'npm run dev' instead.

.PARAMETER StaticWebAppName
The name of the Azure Static Web App to deploy to. Required.

.PARAMETER ResourceGroupName
The name of the resource group containing the Static Web App. Required.

.PARAMETER BackendUrl
The backend Function App URL to configure (optional - will update .env for dev environment)

.PARAMETER SkipBuild
Skip the npm build step if the application is already built

.EXAMPLE
./deploy-frontend-spa-code.ps1 -StaticWebAppName "stapp-aibox-fd-dev-eus2" -ResourceGroupName "rg-ai-foundry-spa-frontend-dev-eus2"

.EXAMPLE
./deploy-frontend-spa-code.ps1 -StaticWebAppName "stapp-aibox-fd-dev-eus2" -ResourceGroupName "rg-ai-foundry-spa-frontend-dev-eus2" -BackendUrl "https://func-ai-foundry-spa-backend-dev-eus2.azurewebsites.net/api"

.EXAMPLE
./deploy-frontend-spa-code.ps1 -StaticWebAppName "my-custom-static-web-app" -ResourceGroupName "my-rg" -SkipBuild
#>

param(
    [Parameter(Mandatory = $true)]
    [string]$StaticWebAppName,
    
    [Parameter(Mandatory = $true)]
    [string]$ResourceGroupName,
    
    [Parameter(Mandatory = $false)]
    [string]$BackendUrl,
    
    [Parameter(Mandatory = $false)]
    [switch]$SkipBuild
)

# Set error action preference
$ErrorActionPreference = "Stop"

Write-Host "üöÄ AI Foundry SPA - Frontend Deployment" -ForegroundColor Green -BackgroundColor Black
Write-Host "=======================================" -ForegroundColor Green

# Change to project root (go up one level from deploy-scripts)
Set-Location (Join-Path $PSScriptRoot "..")

# Check if Azure CLI is installed and logged in
Write-Host "üîç Checking Azure CLI authentication..." -ForegroundColor Yellow
try {
    $account = az account show --output json 2>$null | ConvertFrom-Json
    Write-Host "‚úÖ Azure CLI authenticated as: $($account.user.name)" -ForegroundColor Green
    Write-Host "üìã Subscription: $($account.name) ($($account.id))" -ForegroundColor Cyan
} catch {
    Write-Error "‚ùå Azure CLI not authenticated. Please run 'az login' first."
    exit 1
}

Write-Host "‚òÅÔ∏è Deploying to Azure Static Web App" -ForegroundColor Yellow
Write-Host "   Target Static Web App: $StaticWebAppName" -ForegroundColor Cyan
Write-Host "   Target Resource Group: $ResourceGroupName" -ForegroundColor Cyan

# Verify the Static Web App exists
Write-Host "üîç Verifying Static Web App '$StaticWebAppName' in resource group '$ResourceGroupName'..." -ForegroundColor Yellow
try {
    $staticWebApp = az staticwebapp show --name $StaticWebAppName --resource-group $ResourceGroupName --output json | ConvertFrom-Json
    Write-Host "‚úÖ Static Web App found: $($staticWebApp.name)" -ForegroundColor Green
} catch {
    Write-Error "‚ùå Static Web App '$StaticWebAppName' not found in resource group '$ResourceGroupName'!"
    Write-Host "üí° To create the infrastructure first, run:" -ForegroundColor Yellow
    Write-Host "   az deployment sub create --template-file infra/main-orchestrator.bicep --parameters infra/dev-orchestrator.parameters.bicepparam --location eastus2" -ForegroundColor White
    exit 1
}

# Update environment configuration for dev environment
Write-Host "üîß Updating frontend configuration for dev environment..." -ForegroundColor Yellow

# Create dev environment file with hardcoded dev values
$envContent = @"
# Dev Environment Configuration - Generated by deployment script
VITE_BACKEND_URL=$($BackendUrl -replace '^$', 'http://localhost:7071/api')
VITE_USE_BACKEND=true
VITE_PUBLIC_MODE=false

# AI Foundry Configuration (Dev Environment)
VITE_AI_FOUNDRY_AGENT_NAME=AI in A Box
VITE_AI_FOUNDRY_AGENT_ID=asst_dH7M0nbmdRblhSQO8nIGIYF4
VITE_AI_FOUNDRY_PROJECT_URL=https://ai-foundry-dev-eus.services.ai.azure.com/api/projects/firstProject
VITE_AI_FOUNDRY_ENDPOINT=https://ai-foundry-dev-eus.azureml.net
VITE_AI_FOUNDRY_DEPLOYMENT=gpt-4

# Azure Static Web App Configuration
VITE_STATIC_WEB_APP_NAME=$StaticWebAppName

# Environment Settings
VITE_ENV=dev
NODE_ENV=development
"@

Set-Content -Path "src/frontend/.env.dev" -Value $envContent
Write-Host "‚úÖ Dev environment configuration created" -ForegroundColor Green

# Build frontend if not skipped
if (-not $SkipBuild) {
    Write-Host "üî® Building frontend application for dev environment..." -ForegroundColor Yellow
    
    # Navigate to frontend directory
    Push-Location "src/frontend"
    try {
        # Install dependencies
        Write-Host "üì¶ Installing dependencies..." -ForegroundColor Cyan
        npm install
        if ($LASTEXITCODE -ne 0) {
            Write-Error "‚ùå npm install failed!"
            exit 1
        }
        
        # Build the application for dev environment
        Write-Host "üèóÔ∏è Building application for dev..." -ForegroundColor Cyan
        $env:NODE_ENV = "development"
        
        # Try the dev build script first, fall back to standard build if it fails
        npm run build:dev
        if ($LASTEXITCODE -ne 0) {
            Write-Warning "‚ö†Ô∏è Dev build failed, trying standard build..."
            npm run build
        }
        
        if ($LASTEXITCODE -ne 0) {
            Write-Error "‚ùå Frontend build failed!"
            exit 1
        }
        
        Write-Host "‚úÖ Frontend build completed for dev environment!" -ForegroundColor Green
    } finally {
        Pop-Location
    }
} else {
    Write-Host "‚è≠Ô∏è Skipping frontend build..." -ForegroundColor Yellow
}

# Verify the build output exists
$buildPath = "src/frontend/dist"
if (-not (Test-Path $buildPath)) {
    Write-Error "‚ùå Build output not found at '$buildPath'! Please build the application first."
    exit 1
}

Write-Host "üìÅ Using build output from: $buildPath" -ForegroundColor Cyan

# Deploy to Static Web App
Write-Host "üöÄ Deploying frontend files to Azure Static Web App..." -ForegroundColor Yellow

# Get deployment token for the Static Web App
Write-Host "üîë Getting deployment token..." -ForegroundColor Cyan
$deploymentToken = az staticwebapp secrets list --name $StaticWebAppName --resource-group $ResourceGroupName --query "properties.apiKey" --output tsv

if ($LASTEXITCODE -ne 0 -or [string]::IsNullOrEmpty($deploymentToken)) {
    Write-Error "‚ùå Failed to get deployment token for Static Web App!"
    exit 1
}

# Install SWA CLI if not present
Write-Host "üì¶ Checking for SWA CLI..." -ForegroundColor Cyan
try {
    swa --version | Out-Null
    Write-Host "‚úÖ SWA CLI is available" -ForegroundColor Green
} catch {
    Write-Host "üì¶ Installing SWA CLI..." -ForegroundColor Yellow
    npm install -g @azure/static-web-apps-cli
    if ($LASTEXITCODE -ne 0) {
        Write-Error "‚ùå Failed to install SWA CLI!"
        exit 1
    }
    Write-Host "‚úÖ SWA CLI installed" -ForegroundColor Green
}

# Deploy using SWA CLI
Write-Host "üöÄ Deploying to Static Web App..." -ForegroundColor Yellow
swa deploy $buildPath --deployment-token $deploymentToken --env "dev"

if ($LASTEXITCODE -ne 0) {
    Write-Error "‚ùå Failed to deploy to Static Web App!"
    exit 1
}

Write-Host "‚úÖ Frontend files deployed successfully!" -ForegroundColor Green

# Get the static web app URL
Write-Host "üîó Retrieving Static Web App URL..." -ForegroundColor Yellow
$staticWebsiteUrl = "https://$($staticWebApp.defaultHostname)"

# Clean up temporary dev env file
if (Test-Path "src/frontend/.env.dev") {
    Remove-Item "src/frontend/.env.dev" -Force
}

# Final summary
Write-Host ""
Write-Host "üéâ Frontend deployment completed successfully! üéâ" -ForegroundColor Green -BackgroundColor Black
Write-Host ""
Write-Host "üìã Deployment Summary:" -ForegroundColor Cyan
Write-Host "   Static Web App: $StaticWebAppName" -ForegroundColor White
Write-Host "   Resource Group: $ResourceGroupName" -ForegroundColor White
Write-Host "   Static Web App URL: $staticWebsiteUrl" -ForegroundColor White
Write-Host ""
Write-Host "üåç Your AI Foundry SPA is now live at:" -ForegroundColor Green
Write-Host "   $staticWebsiteUrl" -ForegroundColor Yellow -BackgroundColor DarkBlue
Write-Host ""

Write-Host "üìã Configuration:" -ForegroundColor Cyan
Write-Host "   Backend URL: $($BackendUrl -replace '^$', 'http://localhost:7071/api (local dev)')" -ForegroundColor White
Write-Host "   AI Foundry: ai-foundry-dev-eus (dev environment)" -ForegroundColor White
Write-Host ""

Write-Host "‚ú® Frontend deployment complete! ‚ú®" -ForegroundColor Green
