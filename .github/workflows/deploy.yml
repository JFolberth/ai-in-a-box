name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  DOTNET_VERSION: '8.0.x'

jobs:
  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./src/frontend
      run: npm ci
      
    - name: Build frontend
      working-directory: ./src/frontend
      run: npm run build
      
    - name: Build frontend (dev mode)
      working-directory: ./src/frontend
      run: npm run build:dev
      
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: src/frontend/dist/
        retention-days: 5

  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore backend dependencies
      working-directory: ./src/backend
      run: dotnet restore
      
    - name: Build backend
      working-directory: ./src/backend
      run: dotnet build --configuration Release --no-restore
      
    - name: Test backend (if tests exist)
      working-directory: ./src/backend
      run: |
        if [ -d "Tests" ] || find . -name "*.Tests.csproj" -o -name "*Test*.csproj" | grep -q .; then
          echo "Running backend tests..."
          dotnet test --configuration Release --no-build --verbosity normal
        else
          echo "No backend tests found, skipping test step"
        fi
      
    - name: Publish backend
      working-directory: ./src/backend
      run: dotnet publish --configuration Release --no-build --output ./publish
      
    - name: Upload backend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-publish
        path: src/backend/publish/
        retention-days: 5

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]
    if: always()
    
    steps:
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: ./artifacts/frontend/
        
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-publish
        path: ./artifacts/backend/
        
    - name: Display build summary
      run: |
        echo "## üèóÔ∏è Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Frontend summary
        if [ -d "./artifacts/frontend" ]; then
          echo "### ‚úÖ Frontend Build Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Build output**: $(du -sh ./artifacts/frontend | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Files**: $(find ./artifacts/frontend -type f | wc -l) files generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Frontend Build Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Backend summary
        if [ -d "./artifacts/backend" ]; then
          echo "### ‚úÖ Backend Build Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Build output**: $(du -sh ./artifacts/backend | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Files**: $(find ./artifacts/backend -type f | wc -l) files generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Backend Build Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Review build artifacts if needed" >> $GITHUB_STEP_SUMMARY
        echo "- Run local tests: \`npm test\` (frontend) and \`dotnet test\` (backend)" >> $GITHUB_STEP_SUMMARY
        echo "- Deploy to Azure using deployment scripts in \`deploy-scripts/\`" >> $GITHUB_STEP_SUMMARY
        
    - name: Check build status
      run: |
        if [ "${{ needs.frontend-build.result }}" = "success" ] && [ "${{ needs.backend-build.result }}" = "success" ]; then
          echo "‚úÖ All builds completed successfully!"
          exit 0
        else
          echo "‚ùå One or more builds failed:"
          echo "Frontend: ${{ needs.frontend-build.result }}"
          echo "Backend: ${{ needs.backend-build.result }}"
          exit 1
        fi
