name: CI - Build and Test

# Prevent duplicate runs: 
# - Run on push to main/develop only (not feature branches)
# - Run on pull requests to main/develop (covers feature branch changes)
# - Use concurrency groups to cancel previous runs
on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - '.github/workflows/**'
      - 'infra/**'
      - 'package*.json'
      - '*.csproj'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - '.github/workflows/**'
      - 'infra/**'
      - 'package*.json'
      - '*.csproj'

# Cancel previous runs when pushing new commits
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  DOTNET_VERSION: '8.0.x'

jobs:
  bicep-validation:
    name: Bicep Infrastructure Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      
    - name: Validate Main Orchestrator Template
      run: |
        echo "üîç Validating main orchestrator Bicep template..."
        az deployment sub what-if \
          --location "eastus2" \
          --template-file "infra/main-orchestrator.bicep" \
          --parameters "infra/dev-orchestrator.parameters.bicepparam" \
          --parameters resourceToken="ci-validation"
        echo "‚úÖ Main orchestrator validation completed"
          
    - name: Create temporary resource group for validation
      run: |
        echo "üèóÔ∏è Creating temporary resource group for validation..."
        TEMP_RG="rg-temp-bicep-validation-${{ github.run_number }}"
        az group create --name "$TEMP_RG" --location "eastus2" --tags Purpose=CI-Validation RunNumber=${{ github.run_number }}
        echo "TEMP_RESOURCE_GROUP=$TEMP_RG" >> $GITHUB_ENV
        
    - name: Validate Backend Environment Template
      run: |
        echo "üîç Validating backend environment Bicep template..."
        az deployment group what-if \
          --resource-group "${{ env.TEMP_RESOURCE_GROUP }}" \
          --template-file "infra/environments/backend/main.bicep" \
          --parameters "infra/environments/backend/example-parameters.bicepparam"
        echo "‚úÖ Backend environment validation completed"
          
    - name: Validate Frontend Environment Template
      run: |
        echo "üîç Validating frontend environment Bicep template..."
        az deployment group what-if \
          --resource-group "${{ env.TEMP_RESOURCE_GROUP }}" \
          --template-file "infra/environments/frontend/main.bicep" \
          --parameters "infra/environments/frontend/example-parameters.bicepparam"
        echo "‚úÖ Frontend environment validation completed"
          
    - name: Cleanup temporary resource group
      if: always()
      run: |
        echo "üßπ Cleaning up temporary resource group..."
        if [ -n "${{ env.TEMP_RESOURCE_GROUP }}" ]; then
          az group delete --name "${{ env.TEMP_RESOURCE_GROUP }}" --yes --no-wait
        fi
        
    - name: Bicep validation summary
      run: |
        echo "## üèóÔ∏è Bicep Infrastructure Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚úÖ Templates Validated Successfully" >> $GITHUB_STEP_SUMMARY
        echo "- **Main Orchestrator**: \`infra/main-orchestrator.bicep\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend Environment**: \`infra/environments/backend/main.bicep\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Environment**: \`infra/environments/frontend/main.bicep\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîç Validation Scope" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Bicep template syntax and compilation" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Parameter file compatibility" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Module references and paths" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ RBAC role definitions and scope" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Resource dependencies and naming" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Deployment Ready" >> $GITHUB_STEP_SUMMARY
        echo "Infrastructure templates are validated and ready for deployment using:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "./deploy-scripts/deploy.ps1 -SubscriptionId \"your-subscription-id\"" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./src/frontend
      run: npm ci
      
    - name: Build frontend
      working-directory: ./src/frontend
      run: npm run build
    
    - name: Run frontend tests
      working-directory: ./src/frontend
      run: npm run test:ci
      
    - name: Build frontend (dev mode)
      working-directory: ./src/frontend
      run: npm run build:dev
      
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: src/frontend/dist/
        retention-days: 5

  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore backend dependencies
      working-directory: ./src/backend
      run: dotnet restore
      
    - name: Build backend
      working-directory: ./src/backend
      run: dotnet build --configuration Release --no-restore
      
    - name: Test backend
      working-directory: ./src/backend/tests/AIFoundryProxy.Tests
      run: dotnet test --configuration Release --verbosity normal
      
    - name: Publish backend
      working-directory: ./src/backend
      run: dotnet publish --configuration Release --no-build --output ./publish
      
    - name: Upload backend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-publish
        path: src/backend/publish/
        retention-days: 5

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [bicep-validation, frontend-build, backend-build]
    if: always()
    
    steps:
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: ./artifacts/frontend/
        
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-publish
        path: ./artifacts/backend/
        
    - name: Display build summary
      run: |
        echo "## üèóÔ∏è Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Bicep validation summary
        if [ "${{ needs.bicep-validation.result }}" = "success" ]; then
          echo "### ‚úÖ Bicep Infrastructure Validation Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Templates validated**: Main orchestrator, Backend environment, Frontend environment" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation scope**: Syntax, parameters, dependencies, RBAC" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Bicep Infrastructure Validation Failed" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.bicep-validation.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Frontend summary
        if [ -d "./artifacts/frontend" ]; then
          echo "### ‚úÖ Frontend Build Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Build output**: $(du -sh ./artifacts/frontend | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Files**: $(find ./artifacts/frontend -type f | wc -l) files generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Frontend Build Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Backend summary
        if [ -d "./artifacts/backend" ]; then
          echo "### ‚úÖ Backend Build Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Build output**: $(du -sh ./artifacts/backend | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Files**: $(find ./artifacts/backend -type f | wc -l) files generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Backend Build Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Review build artifacts if needed" >> $GITHUB_STEP_SUMMARY
        echo "- Run local tests: \`npm test\` (frontend) and \`dotnet test\` (backend)" >> $GITHUB_STEP_SUMMARY
        echo "- Deploy to Azure using deployment scripts in \`deploy-scripts/\`" >> $GITHUB_STEP_SUMMARY
        
    - name: Check build status
      run: |
        if [ "${{ needs.bicep-validation.result }}" = "success" ] && [ "${{ needs.frontend-build.result }}" = "success" ] && [ "${{ needs.backend-build.result }}" = "success" ]; then
          echo "‚úÖ All builds and validations completed successfully!"
          exit 0
        else
          echo "‚ùå One or more builds/validations failed:"
          echo "Bicep Validation: ${{ needs.bicep-validation.result }}"
          echo "Frontend: ${{ needs.frontend-build.result }}"
          echo "Backend: ${{ needs.backend-build.result }}"
          exit 1
        fi
