name: CI - Build and Test

# Prevent duplicate runs: 
# - Run on push to main/develop only (not feature branches)
# - Run on pull requests to main/develop (covers feature branch changes)
# - Use concurrency groups to cancel previous runs
on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - '.github/workflows/**'
      - 'infra/**'
      - 'package*.json'
      - '*.csproj'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - '.github/workflows/**'
      - 'infra/**'
      - 'package*.json'
      - '*.csproj'

# Cancel previous runs when pushing new commits
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  bicep-validation:
    name: Infrastructure Validation
    uses: ./.github/workflows/shared-bicep-validation.yml
    secrets: inherit

  frontend-build:
    name: Frontend Build and Test
    uses: ./.github/workflows/shared-frontend-build.yml
    with:
      node-version: ${{ vars.NODE_VERSION || '20' }}
      upload-artifacts: true
      artifact-name: frontend-dist
    secrets: inherit

  backend-build:
    name: Backend Build and Test
    uses: ./.github/workflows/shared-backend-build.yml
    with:
      dotnet-version: ${{ vars.DOTNET_VERSION || '8.0.x' }}
      upload-artifacts: true
      artifact-name: backend-publish
    secrets: inherit

  # ============================================================================
  # ADE VALIDATION DEPLOYMENT JOBS
  # ============================================================================
  # Deploy to ADE for validation on pull requests and before main deployment
  
  deploy-ade-frontend-validation:
    name: Deploy ADE Frontend (Validation)
    runs-on: ubuntu-latest
    needs: [bicep-validation, frontend-build]
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    outputs:
      ade-environment-name: ${{ steps.create-ade.outputs.ade-environment-name }}
      resource-group-name: ${{ steps.create-ade.outputs.resource-group-name }}
      validation-status: ${{ steps.validate-deployment.outputs.status }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: ./src/frontend/dist/
        
    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Create ADE Frontend Environment
      id: create-ade
      run: |
        echo "üöÄ Creating ADE frontend environment for validation..."
        
        # Generate unique environment name based on event type
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          ADE_ENV_NAME="pr-fd-${{ github.event.number }}-${{ github.run_number }}"
        else
          ADE_ENV_NAME="main-fd-${{ github.run_number }}"
        fi
        
        echo "ADE_ENVIRONMENT_NAME=$ADE_ENV_NAME" >> $GITHUB_ENV
        echo "ade-environment-name=$ADE_ENV_NAME" >> $GITHUB_OUTPUT
        
        # Construct resource group name using ADE naming convention
        RESOURCE_GROUP="ai-foundry-$ADE_ENV_NAME"
        echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP" >> $GITHUB_ENV
        echo "resource-group-name=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
        
        # Update static ADE parameters file with dynamic environment name
        jq --arg adeName "$ADE_ENV_NAME" '.adeName = $adeName' infra/environments/frontend/ade.parameters.json > /tmp/ade-frontend-params.json
        
        # Calculate expiration time (24 hours from now)
        EXPIRATION_TIME=$(date -u -d "+24 hours" '+%Y-%m-%dT%H:%M:%SZ')
        echo "üïí Setting environment expiration to: $EXPIRATION_TIME"
        
        # Create ADE environment with 24-hour expiration
        echo "üì¶ Deploying ADE frontend environment: $ADE_ENV_NAME (expires in 24 hours)"
        az devcenter dev environment create \
          --dev-center-name "devcenter-eus-dev" \
          --project-name "ai-foundry" \
          --catalog-name "ai-in-abox-infrastructure" \
          --environment-definition-name "AI_Foundry_SPA_Frontend" \
          --environment-type "dev" \
          --name "$ADE_ENV_NAME" \
          --parameters /tmp/ade-frontend-params.json \
          --expiration "$EXPIRATION_TIME" \
          --no-wait
        
        echo "‚è≥ Waiting for ADE frontend environment deployment to complete..."
        
        # Wait for deployment to complete (timeout after 10 minutes)
        timeout=600
        elapsed=0
        while [ $elapsed -lt $timeout ]; do
          status=$(az devcenter dev environment show \
            --dev-center-name "devcenter-eus-dev" \
            --project-name "ai-foundry" \
            --name "$ADE_ENV_NAME" \
            --query "provisioningState" \
            --output tsv || echo "NotFound")
          
          echo "üîç Frontend environment status: $status (${elapsed}s elapsed)"
          
          if [ "$status" = "Succeeded" ]; then
            echo "‚úÖ ADE frontend environment deployed successfully!"
            break
          elif [ "$status" = "Failed" ]; then
            echo "‚ùå ADE frontend environment deployment failed!"
            exit 1
          fi
          
          sleep 30
          elapsed=$((elapsed + 30))
        done
        
        if [ $elapsed -ge $timeout ]; then
          echo "‚ùå ADE frontend environment deployment timed out after 10 minutes!"
          exit 1
        fi
    
    - name: Validate Frontend Deployment
      id: validate-deployment
      run: |
        echo "üîç Validating frontend deployment in ADE environment..."
        
        # Find Static Web App by resource type
        STATIC_WEB_APP_NAME=$(az staticwebapp list \
          --resource-group "$RESOURCE_GROUP" \
          --query "[0].name" \
          --output tsv)
        
        if [ -z "$STATIC_WEB_APP_NAME" ] || [ "$STATIC_WEB_APP_NAME" = "null" ]; then
          echo "‚ùå No Static Web App found in resource group: $RESOURCE_GROUP"
          echo "status=failed" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "‚úÖ Frontend validation passed - Static Web App: $STATIC_WEB_APP_NAME"
        echo "status=success" >> $GITHUB_OUTPUT

  deploy-ade-backend-validation:
    name: Deploy ADE Backend (Validation)
    runs-on: ubuntu-latest
    needs: [bicep-validation, backend-build]
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    outputs:
      ade-environment-name: ${{ steps.create-ade.outputs.ade-environment-name }}
      resource-group-name: ${{ steps.create-ade.outputs.resource-group-name }}
      validation-status: ${{ steps.validate-deployment.outputs.status }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-publish
        path: ./src/backend/publish/
        
    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Create ADE Backend Environment
      id: create-ade
      run: |
        echo "üöÄ Creating ADE backend environment for validation..."
        
        # Generate unique environment name based on event type
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          ADE_ENV_NAME="pr-be-${{ github.event.number }}-${{ github.run_number }}"
        else
          ADE_ENV_NAME="main-be-${{ github.run_number }}"
        fi
        
        echo "ADE_ENVIRONMENT_NAME=$ADE_ENV_NAME" >> $GITHUB_ENV
        echo "ade-environment-name=$ADE_ENV_NAME" >> $GITHUB_OUTPUT
        
        # Construct resource group name using ADE naming convention
        RESOURCE_GROUP="ai-foundry-$ADE_ENV_NAME"
        echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP" >> $GITHUB_ENV
        echo "resource-group-name=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
        
        # Update static ADE parameters file with dynamic environment name
        jq --arg adeName "$ADE_ENV_NAME" '.adeName = $adeName' infra/environments/backend/ade.parameters.json > /tmp/ade-backend-params.json
        
        # Calculate expiration time (24 hours from now)
        EXPIRATION_TIME=$(date -u -d "+24 hours" '+%Y-%m-%dT%H:%M:%SZ')
        echo "üïí Setting environment expiration to: $EXPIRATION_TIME"
        
        # Create ADE environment with 24-hour expiration
        echo "üì¶ Deploying ADE backend environment: $ADE_ENV_NAME (expires in 24 hours)"
        az devcenter dev environment create \
          --dev-center-name "devcenter-eus-dev" \
          --project-name "ai-foundry" \
          --catalog-name "ai-in-abox-infrastructure" \
          --environment-definition-name "AI_Foundry_SPA_Backend" \
          --environment-type "dev" \
          --name "$ADE_ENV_NAME" \
          --parameters /tmp/ade-backend-params.json \
          --expiration "$EXPIRATION_TIME" \
          --no-wait
        
        echo "‚è≥ Waiting for ADE backend environment deployment to complete..."
        
        # Wait for deployment to complete (timeout after 15 minutes for backend)
        timeout=900
        elapsed=0
        while [ $elapsed -lt $timeout ]; do
          status=$(az devcenter dev environment show \
            --dev-center-name "devcenter-eus-dev" \
            --project-name "ai-foundry" \
            --name "$ADE_ENV_NAME" \
            --query "provisioningState" \
            --output tsv || echo "NotFound")
          
          echo "üîç Backend environment status: $status (${elapsed}s elapsed)"
          
          if [ "$status" = "Succeeded" ]; then
            echo "‚úÖ ADE backend environment deployed successfully!"
            break
          elif [ "$status" = "Failed" ]; then
            echo "‚ùå ADE backend environment deployment failed!"
            exit 1
          fi
          
          sleep 30
          elapsed=$((elapsed + 30))
        done
        
        if [ $elapsed -ge $timeout ]; then
          echo "‚ùå ADE backend environment deployment timed out after 15 minutes!"
          exit 1
        fi
    
    - name: Validate Backend Deployment
      id: validate-deployment
      run: |
        echo "üîç Validating backend deployment in ADE environment..."
        
        # Find Function App by resource type
        FUNCTION_APP_NAME=$(az functionapp list \
          --resource-group "$RESOURCE_GROUP" \
          --query "[0].name" \
          --output tsv)
        
        if [ -z "$FUNCTION_APP_NAME" ] || [ "$FUNCTION_APP_NAME" = "null" ]; then
          echo "‚ùå No Function App found in resource group: $RESOURCE_GROUP"
          echo "status=failed" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Check if Function App can connect to AI Foundry (basic connectivity test)
        echo "üîó Testing Function App connectivity..."
        FUNCTION_APP_URL="https://$FUNCTION_APP_NAME.azurewebsites.net"
        
        # Test health endpoint (if it exists)
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$FUNCTION_APP_URL/api/health" || echo "000")
        
        if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "404" ]; then
          echo "‚úÖ Backend validation passed - Function App: $FUNCTION_APP_NAME (HTTP: $HTTP_STATUS)"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è Backend validation completed with warnings - Function App: $FUNCTION_APP_NAME (HTTP: $HTTP_STATUS)"
          echo "status=success" >> $GITHUB_OUTPUT
        fi

  ade-validation-summary:
    name: ADE Validation Summary
    runs-on: ubuntu-latest
    needs: [deploy-ade-frontend-validation, deploy-ade-backend-validation]
    if: always() && (github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main'))
    outputs:
      validation-status: ${{ steps.summary.outputs.status }}
    
    steps:
    - name: Validation Summary
      id: summary
      run: |
        echo "üìã ADE Validation Summary"
        echo "========================"
        
        FRONTEND_STATUS="${{ needs.deploy-ade-frontend-validation.outputs.validation-status }}"
        BACKEND_STATUS="${{ needs.deploy-ade-backend-validation.outputs.validation-status }}"
        
        echo "Frontend Validation: $FRONTEND_STATUS"
        echo "Backend Validation: $BACKEND_STATUS"
        
        if [ "$FRONTEND_STATUS" = "success" ] && [ "$BACKEND_STATUS" = "success" ]; then
          echo "‚úÖ All ADE validations passed!"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ùå ADE validation failed!"
          echo "status=failed" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: ADE Environment Information
      run: |
        echo "## üèóÔ∏è ADE Validation Environments" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Environment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend Environment**: \`${{ needs.deploy-ade-frontend-validation.outputs.ade-environment-name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend Environment**: \`${{ needs.deploy-ade-backend-validation.outputs.ade-environment-name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üïí Automatic Cleanup" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Note**: ADE environments are configured with 24-hour expiration and will be automatically deleted." >> $GITHUB_STEP_SUMMARY
        echo "No manual cleanup required." >> $GITHUB_STEP_SUMMARY

  deploy-dev-infrastructure:
    name: Deploy Dev Infrastructure
    uses: ./.github/workflows/shared-infrastructure-deploy.yml
    needs: [bicep-validation, ade-validation-summary]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.ade-validation-summary.outputs.validation-status == 'success'
    with:
      environment: 'dev'
      bicep-template: 'infra/main-orchestrator.bicep'
      parameters-file: 'infra/dev-orchestrator.parameters.bicepparam'
      location: 'eastus2'
      validate-only: false
    secrets: inherit

  deploy-agent:
    name: Deploy AI Foundry Agent
    runs-on: ubuntu-latest
    needs: [deploy-dev-infrastructure]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.deploy-dev-infrastructure.outputs.deployment-status == 'Succeeded'
    permissions:
      contents: read
      actions: read
    outputs:
      agent-id: ${{ steps.deploy-agent.outputs.agent-id }}
      agent-name: ${{ steps.deploy-agent.outputs.agent-name }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Validate AI Foundry Infrastructure
      run: |
        echo "üîç Validating AI Foundry infrastructure outputs..."
        
        AI_FOUNDRY_ENDPOINT="${{ needs.deploy-dev-infrastructure.outputs.ai-foundry-endpoint }}"
        
        if [ "$AI_FOUNDRY_ENDPOINT" = "not-found" ] || [ -z "$AI_FOUNDRY_ENDPOINT" ]; then
          echo "‚ùå AI Foundry endpoint not found in infrastructure outputs"
          exit 1
        fi
        
        echo "‚úÖ AI Foundry infrastructure validated:"
        echo "  - Endpoint: $AI_FOUNDRY_ENDPOINT"
        
    - name: Deploy AI Foundry Agent
      id: deploy-agent
      shell: pwsh
      run: |
        Write-Host "ü§ñ Deploying AI Foundry agent..."
        
        # Set environment variables for the script
        $env:AI_FOUNDRY_ENDPOINT = "${{ needs.deploy-dev-infrastructure.outputs.ai-foundry-endpoint }}"
        $env:AGENT_NAME = "AI in A Box"
        $env:AGENT_YAML_CONTENT = Get-Content -Path "src/agent/ai_in_a_box.yaml" -Raw
        
        # Execute the agent deployment script
        $output = & "./infra/agent_deploy.ps1" 2>&1
        
        # Capture the script output
        Write-Host "Script output:"
        Write-Host $output
        
        # Look for the AGENT_DEPLOYMENT_RESULT line in the output
        $resultLine = $output | Where-Object { $_ -match "AGENT_DEPLOYMENT_RESULT:" }
        
        if ($resultLine) {
          $jsonPart = $resultLine -replace ".*AGENT_DEPLOYMENT_RESULT:\s*", ""
          Write-Host "Found result: $jsonPart"
          
          # Parse the JSON result
          $result = $jsonPart | ConvertFrom-Json
          
          if ($result.success) {
            Write-Host "‚úÖ Agent deployment successful!"
            Write-Host "Agent ID: $($result.agentId)"
            Write-Host "Agent Name: $($result.agentName)"
            
            # Set outputs for next job
            echo "agent-id=$($result.agentId)" >> $env:GITHUB_OUTPUT
            echo "agent-name=$($result.agentName)" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "‚ùå Agent deployment failed: $($result.error)"
            exit 1
          }
        } else {
          Write-Host "‚ùå Could not find agent deployment result in output"
          exit 1
        }
        
    - name: Agent Deployment Summary
      run: |
        echo "## ü§ñ AI Foundry Agent Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚úÖ Agent Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "- **Agent Name**: \`${{ steps.deploy-agent.outputs.agent-name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Agent ID**: \`${{ steps.deploy-agent.outputs.agent-id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **AI Foundry Endpoint**: \`${{ needs.deploy-dev-infrastructure.outputs.ai-foundry-endpoint }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîß Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Method**: PowerShell Script via GitHub Actions" >> $GITHUB_STEP_SUMMARY
        echo "- **Configuration Source**: YAML file (src/agent/ai_in_a_box.yaml)" >> $GITHUB_STEP_SUMMARY
        echo "- **Authentication**: Azure CLI with Service Principal" >> $GITHUB_STEP_SUMMARY

  deploy-backend-code:
    name: Deploy Backend Code
    runs-on: ubuntu-latest
    needs: [backend-build, deploy-dev-infrastructure, deploy-agent]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.deploy-dev-infrastructure.outputs.deployment-status == 'Succeeded'
    permissions:
      contents: read
      actions: read
    
    steps:
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-publish
        path: ./backend-artifacts/
        
    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Validate Infrastructure Outputs
      run: |
        echo "üîç Validating infrastructure deployment outputs..."
        
        FUNCTION_APP_NAME="${{ needs.deploy-dev-infrastructure.outputs.backend-function-app-name }}"
        RESOURCE_GROUP_NAME="${{ needs.deploy-dev-infrastructure.outputs.backend-resource-group-name }}"
        
        if [ "$FUNCTION_APP_NAME" = "not-found" ] || [ -z "$FUNCTION_APP_NAME" ]; then
          echo "‚ùå Backend Function App name not found in infrastructure outputs"
          exit 1
        fi
        
        if [ "$RESOURCE_GROUP_NAME" = "not-found" ] || [ -z "$RESOURCE_GROUP_NAME" ]; then
          echo "‚ùå Backend Resource Group name not found in infrastructure outputs"
          exit 1
        fi
        
        echo "‚úÖ Infrastructure outputs validated:"
        echo "  - Function App: $FUNCTION_APP_NAME"
        echo "  - Resource Group: $RESOURCE_GROUP_NAME"
        
    - name: Prepare deployment package
      run: |
        echo "üì¶ Preparing backend deployment package..."
        
        # Verify the deployment zip exists
        if [ ! -f "./backend-artifacts/backend-deployment.zip" ]; then
          echo "‚ùå Backend deployment zip not found!"
          echo "Contents of backend-artifacts directory:"
          ls -la ./backend-artifacts/
          exit 1
        fi
        
        # Verify the zip contains the required .azurefunctions directory
        echo "üîç Verifying deployment package contents..."
        unzip -l ./backend-artifacts/backend-deployment.zip | grep -E "\.azurefunctions|azurefunctions/" || {
          echo "‚ùå .azurefunctions directory not found in deployment package!"
          exit 1
        }
        
        echo "‚úÖ Deployment package validated successfully"
        echo "üìã Package contents summary:"
        unzip -l ./backend-artifacts/backend-deployment.zip | head -10
        
    - name: Deploy Backend Code to Function App
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ needs.deploy-dev-infrastructure.outputs.backend-function-app-name }}
        package: './backend-artifacts/backend-deployment.zip'
        
    - name: Update Function App Settings with Agent ID
      run: |
        echo "üîß Updating Function App settings with AI Foundry agent configuration..."
        
        FUNCTION_APP_NAME="${{ needs.deploy-dev-infrastructure.outputs.backend-function-app-name }}"
        RESOURCE_GROUP_NAME="${{ needs.deploy-dev-infrastructure.outputs.backend-resource-group-name }}"
        AGENT_ID="${{ needs.deploy-agent.outputs.agent-id }}"
        AGENT_NAME="${{ needs.deploy-agent.outputs.agent-name }}"
        
        if [ -z "$AGENT_ID" ]; then
          echo "‚ö†Ô∏è Agent ID not available from deployment step - Function App will use default fallback"
        else
          echo "üîß Updating Function App settings..."
          az functionapp config appsettings set \
            --name "$FUNCTION_APP_NAME" \
            --resource-group "$RESOURCE_GROUP_NAME" \
            --settings \
              "AiFoundryAgentId=$AGENT_ID" \
              "AiFoundryAgentName=$AGENT_NAME"
          
          echo "‚úÖ Function App settings updated successfully:"
          echo "  - Agent ID: $AGENT_ID"
          echo "  - Agent Name: $AGENT_NAME"
        fi
        
    - name: Backend Deployment Summary
      run: |
        echo "## üöÄ Backend Code Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚úÖ Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "- **Function App**: \`${{ needs.deploy-dev-infrastructure.outputs.backend-function-app-name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Resource Group**: \`${{ needs.deploy-dev-infrastructure.outputs.backend-resource-group-name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Function App URL**: [${{ needs.deploy-dev-infrastructure.outputs.backend-function-app-url }}](${{ needs.deploy-dev-infrastructure.outputs.backend-function-app-url }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ü§ñ AI Foundry Agent Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Agent ID**: \`${{ needs.deploy-agent.outputs.agent-id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Agent Name**: \`${{ needs.deploy-agent.outputs.agent-name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîß Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Action Used**: Azure/functions-action@v1" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Artifacts**: Pre-built from CI pipeline" >> $GITHUB_STEP_SUMMARY
        echo "- **Deploy Method**: Native GitHub Action" >> $GITHUB_STEP_SUMMARY
        echo "- **Configuration Update**: Function App settings updated with agent configuration" >> $GITHUB_STEP_SUMMARY

  deploy-frontend-code:
    name: Deploy Frontend Code
    runs-on: ubuntu-latest
    needs: [frontend-build, deploy-dev-infrastructure]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.deploy-dev-infrastructure.outputs.deployment-status == 'Succeeded'
    
    steps:
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: ./src/frontend/dist/
        
    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Validate Infrastructure Outputs
      run: |
        echo "üîç Validating infrastructure deployment outputs..."
        
        STATIC_WEB_APP_NAME="${{ needs.deploy-dev-infrastructure.outputs.frontend-static-web-app-name }}"
        RESOURCE_GROUP_NAME="${{ needs.deploy-dev-infrastructure.outputs.frontend-resource-group-name }}"
        BACKEND_URL="${{ needs.deploy-dev-infrastructure.outputs.backend-function-app-url }}"
        
        if [ "$STATIC_WEB_APP_NAME" = "not-found" ] || [ -z "$STATIC_WEB_APP_NAME" ]; then
          echo "‚ùå Frontend Static Web App name not found in infrastructure outputs"
          exit 1
        fi
        
        if [ "$RESOURCE_GROUP_NAME" = "not-found" ] || [ -z "$RESOURCE_GROUP_NAME" ]; then
          echo "‚ùå Frontend Resource Group name not found in infrastructure outputs"
          exit 1
        fi
        
        echo "‚úÖ Infrastructure outputs validated:"
        echo "  - Static Web App: $STATIC_WEB_APP_NAME"
        echo "  - Resource Group: $RESOURCE_GROUP_NAME"
        echo "  - Backend URL: $BACKEND_URL"
        
    - name: Deploy Frontend Code to Static Web App  
      run: |
        echo "üöÄ Deploying frontend code to Static Web App..."
        
        # Deploy using Azure CLI directly (native Azure command)
        az staticwebapp create \
          --name "${{ needs.deploy-dev-infrastructure.outputs.frontend-static-web-app-name }}" \
          --resource-group "${{ needs.deploy-dev-infrastructure.outputs.frontend-resource-group-name }}" \
          --source "./src/frontend/dist" \
          --location "${{ needs.deploy-dev-infrastructure.outputs.frontend-resource-group-name }}" \
          --branch "main" \
          --token "${{ secrets.GITHUB_TOKEN }}" || true
        
        # If create fails because it exists, deploy to existing
        echo "üì¶ Deploying to existing Static Web App..."
        
        # Get deployment token for the Static Web App
        DEPLOYMENT_TOKEN=$(az staticwebapp secrets list \
          --name "${{ needs.deploy-dev-infrastructure.outputs.frontend-static-web-app-name }}" \
          --resource-group "${{ needs.deploy-dev-infrastructure.outputs.frontend-resource-group-name }}" \
          --query "properties.apiKey" \
          --output tsv)
        
        # Install SWA CLI
        npm install -g @azure/static-web-apps-cli
        
        # Deploy using SWA CLI
        swa deploy \
          --app-location "./src/frontend/dist" \
          --deployment-token "$DEPLOYMENT_TOKEN" \
          --env "default"
        
        echo "‚úÖ Frontend code deployed successfully!"
        
    - name: Frontend Deployment Summary
      run: |
        echo "## üåê Frontend Code Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚úÖ Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "- **Static Web App**: \`${{ needs.deploy-dev-infrastructure.outputs.frontend-static-web-app-name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Resource Group**: \`${{ needs.deploy-dev-infrastructure.outputs.frontend-resource-group-name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Application URL**: [${{ needs.deploy-dev-infrastructure.outputs.frontend-static-web-app-url }}](${{ needs.deploy-dev-infrastructure.outputs.frontend-static-web-app-url }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend Integration**: ${{ needs.deploy-dev-infrastructure.outputs.backend-function-app-url }}/api" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîß Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Action Used**: Azure CLI + SWA CLI (Native Azure Commands)" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Artifacts**: Pre-built from CI pipeline" >> $GITHUB_STEP_SUMMARY
        echo "- **Deploy Method**: Native Azure CLI Commands" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # ADE DEPLOYMENT JOBS - DISABLED (PRESERVED FOR FUTURE USE)
  # ============================================================================
  # TODO: Re-enable these jobs when ADE deployment is needed again
  # These jobs have been commented out to focus on direct infrastructure deployment
  
  # deploy-ade-frontend:
  #   name: Deploy ADE Frontend
  #   runs-on: ubuntu-latest
  #   needs: [bicep-validation, frontend-build]
  #   if: false  # Explicitly disabled - change to enable ADE deployment
  #   # Original condition: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4
  #     
  #   - name: Download frontend artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: frontend-dist
  #       path: ./src/frontend/dist/
  #       
  #   - name: Azure CLI Login
  #     uses: azure/login@v2
  #     with:
  #       creds: ${{ secrets.AZURE_CREDENTIALS }}
  #   
  #   - name: Create ADE Environment
  #     id: create-ade
  #     run: |
  #       echo "üöÄ Creating ADE environment for frontend deployment..."
  #       
  #       # Generate unique environment name
  #       ADE_ENV_NAME="cicd-fd-${{ github.run_number }}"
  #       echo "ADE_ENVIRONMENT_NAME=$ADE_ENV_NAME" >> $GITHUB_ENV
  #       
  #       # Create ADE environment
  #       echo "üì¶ Deploying ADE environment: $ADE_ENV_NAME"
  #       az devcenter dev environment create \
  #         --dev-center-name "devcenter-eus-dev" \
  #         --project-name "ai-foundry" \
  #         --catalog-name "ai-in-abox-infrastructure" \
  #         --environment-definition-name "AI_Foundry_SPA_Frontend" \
  #         --environment-type "dev" \
  #         --name "$ADE_ENV_NAME" \
  #         --parameters infra/environments/frontend/ade.parameters.json \
  #         --no-wait
  #       
  #       echo "‚è≥ Waiting for ADE environment deployment to complete..."
  #       
  #       # Wait for deployment to complete (timeout after 10 minutes)
  #       timeout=600
  #       elapsed=0
  #       while [ $elapsed -lt $timeout ]; do
  #         status=$(az devcenter dev environment show \
  #           --dev-center-name "devcenter-eus-dev" \
  #           --project-name "ai-foundry" \
  #           --name "$ADE_ENV_NAME" \
  #           --query "provisioningState" \
  #           --output tsv || echo "NotFound")
  #         
  #         echo "üîç Environment status: $status (${elapsed}s elapsed)"
  #         
  #         if [ "$status" = "Succeeded" ]; then
  #           echo "‚úÖ ADE environment deployed successfully!"
  #           break
  #         elif [ "$status" = "Failed" ]; then
  #           echo "‚ùå ADE environment deployment failed!"
  #           exit 1
  #         fi
  #         
  #         sleep 30
  #         elapsed=$((elapsed + 30))
  #       done
  #       
  #       if [ $elapsed -ge $timeout ]; then
  #         echo "‚ùå ADE environment deployment timed out after 10 minutes!"
  #         exit 1
  #       fi
  #   
  #   - name: Extract ADE Outputs
  #     id: extract-outputs
  #     run: |
  #       echo "üìã Extracting outputs from ADE environment..."
  #       
  #       # Get environment details
  #       ENV_DETAILS=$(az devcenter dev environment show \
  #         --dev-center-name "devcenter-eus-dev" \
  #         --project-name "ai-foundry" \
  #         --name "${{ env.ADE_ENVIRONMENT_NAME }}" \
  #         --output json)
  #       
  #       # Construct resource group name using ADE naming convention: {project}-{adeName}
  #       # Based on ade.parameters.json: devCenterProjectName + "-" + adeName
  #       RESOURCE_GROUP="ai-foundry-${{ env.ADE_ENVIRONMENT_NAME }}"
  #       echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP" >> $GITHUB_ENV
  #       
  #       echo "üîç Querying resources directly from resource group: $RESOURCE_GROUP"
  #       
  #       # Find Static Web App by resource type (more reliable than deployment outputs)
  #       STATIC_WEB_APP_NAME=$(az staticwebapp list \
  #         --resource-group "$RESOURCE_GROUP" \
  #         --query "[0].name" \
  #         --output tsv)
  #       
  #       if [ -z "$STATIC_WEB_APP_NAME" ] || [ "$STATIC_WEB_APP_NAME" = "null" ]; then
  #         echo "‚ùå No Static Web App found in resource group: $RESOURCE_GROUP"
  #         echo "üîç Available resources:"
  #         az resource list --resource-group "$RESOURCE_GROUP" --output table
  #         exit 1
  #       fi
  #       
  #       echo "üì¶ Found Static Web App: $STATIC_WEB_APP_NAME"
  #       
  #       # Get Static Web App URL directly from the resource
  #       STATIC_WEB_APP_HOSTNAME=$(az staticwebapp show \
  #         --name "$STATIC_WEB_APP_NAME" \
  #         --resource-group "$RESOURCE_GROUP" \
  #         --query "defaultHostname" \
  #         --output tsv)
  #       
  #       if [ -z "$STATIC_WEB_APP_HOSTNAME" ] || [ "$STATIC_WEB_APP_HOSTNAME" = "null" ]; then
  #         echo "‚ùå Failed to get Static Web App hostname"
  #         exit 1
  #       fi
  #       
  #       STATIC_WEB_APP_URL="https://$STATIC_WEB_APP_HOSTNAME"
  #       
  #       # Validate URLs are not empty
  #       if [ -z "$STATIC_WEB_APP_URL" ] || [ "$STATIC_WEB_APP_URL" = "https://" ] || [ "$STATIC_WEB_APP_URL" = "null" ]; then
  #         echo "‚ùå Invalid or empty Static Web App URL: '$STATIC_WEB_APP_URL'"
  #         exit 1
  #       fi
  #       
  #       if [ -z "$STATIC_WEB_APP_NAME" ] || [ "$STATIC_WEB_APP_NAME" = "null" ]; then
  #         echo "‚ùå Invalid or empty Static Web App Name: '$STATIC_WEB_APP_NAME'"
  #         exit 1
  #       fi
  #       
  #       echo "üìã Reading AI Foundry configuration from backend ade.parameters.json..."
  #       
  #       # Use the reusable helper script to extract AI Foundry parameters
  #       echo "üîß Using extract-ade-parameters.sh helper script..."
  #       
  #       # Extract parameters using the helper script
  #       if ! PARAMETER_OUTPUT=$(./tests/utilities/extract-ade-parameters.sh -o export -q); then
  #           echo "‚ùå Failed to extract AI Foundry parameters from backend ade.parameters.json"
  #           echo "Please check that all required parameters are present and valid."
  #           exit 1
  #       fi
  #       
  #       # Source the extracted parameters into environment
  #       eval "$PARAMETER_OUTPUT"
  #       
  #       # Set environment variables for standard ADE outputs
  #       echo "STATIC_WEB_APP_NAME=$STATIC_WEB_APP_NAME" >> $GITHUB_ENV
  #       echo "STATIC_WEB_APP_URL=$STATIC_WEB_APP_URL" >> $GITHUB_ENV
  #       
  #       # Set environment variables for AI Foundry configuration
  #       echo "AI_FOUNDRY_ENDPOINT=$AI_FOUNDRY_ENDPOINT" >> $GITHUB_ENV
  #       echo "AI_FOUNDRY_AGENT_ID=$AI_FOUNDRY_AGENT_ID" >> $GITHUB_ENV
  #       echo "AI_FOUNDRY_AGENT_NAME=$AI_FOUNDRY_AGENT_NAME" >> $GITHUB_ENV
  #       echo "AI_FOUNDRY_INSTANCE_NAME=$AI_FOUNDRY_INSTANCE_NAME" >> $GITHUB_ENV
  #       echo "AI_FOUNDRY_RG_NAME=$AI_FOUNDRY_RG_NAME" >> $GITHUB_ENV
  #       
  #       echo "‚úÖ Successfully extracted resources and AI Foundry configuration:"
  #       echo "  - Resource Group: $RESOURCE_GROUP"
  #       echo "  - Static Web App: $STATIC_WEB_APP_NAME"
  #       echo "  - Static Web App URL: $STATIC_WEB_APP_URL"
  #       echo "  - AI Foundry Endpoint: $AI_FOUNDRY_ENDPOINT"
  #       echo "  - AI Foundry Agent: $AI_FOUNDRY_AGENT_NAME ($AI_FOUNDRY_AGENT_ID)"
  #       echo "  - AI Foundry Instance: $AI_FOUNDRY_INSTANCE_NAME"
  #   
  #   - name: Install SWA CLI
  #     run: |
  #       echo "üì¶ Installing Azure Static Web Apps CLI..."
  #       npm install -g @azure/static-web-apps-cli
  #   
  #   - name: Deploy Frontend Code to Static Web App using RBAC
  #     run: |
  #       echo "üöÄ Deploying frontend code using SWA CLI with RBAC..."
  #       
  #       # Deploy using SWA CLI with Azure CLI authentication
  #       # The SWA CLI will use the Azure credentials from the az login step
  #       swa deploy \
  #         --app-location "./src/frontend/dist" \
  #         --resource-group "${{ env.RESOURCE_GROUP_NAME }}" \
  #         --app-name "${{ env.STATIC_WEB_APP_NAME }}" \
  #         --env "default"
  #       
  #       echo "‚úÖ Frontend code deployed successfully using RBAC!"
  #   
  #   - name: Deployment Success
  #     run: |
  #       echo "‚úÖ Frontend code deployed successfully!"
  #       echo "üîó Application URL: ${{ env.STATIC_WEB_APP_URL }}"
  #   
  #   - name: ADE Deployment Summary
  #     run: |
  #       echo "## üöÄ ADE Frontend Deployment Summary" >> $GITHUB_STEP_SUMMARY
  #       echo "" >> $GITHUB_STEP_SUMMARY
  #       echo "### ‚úÖ Deployment Successful" >> $GITHUB_STEP_SUMMARY
  #       echo "- **ADE Environment**: \`${{ env.ADE_ENVIRONMENT_NAME }}\`" >> $GITHUB_STEP_SUMMARY
  #       echo "- **Resource Group**: \`${{ env.RESOURCE_GROUP_NAME }}\`" >> $GITHUB_STEP_SUMMARY
  #       echo "- **Static Web App**: \`${{ env.STATIC_WEB_APP_NAME }}\`" >> $GITHUB_STEP_SUMMARY
  #       echo "- **Application URL**: [${{ env.STATIC_WEB_APP_URL }}](${{ env.STATIC_WEB_APP_URL }})" >> $GITHUB_STEP_SUMMARY
  #       echo "" >> $GITHUB_STEP_SUMMARY
  #       echo "### üîß ADE Configuration Used" >> $GITHUB_STEP_SUMMARY
  #       echo "- **DevCenter**: devcenter-eus-dev" >> $GITHUB_STEP_SUMMARY
  #       echo "- **Project**: ai-foundry" >> $GITHUB_STEP_SUMMARY
  #       echo "- **Catalog**: ai-in-abox-infrastructure" >> $GITHUB_STEP_SUMMARY
  #       echo "- **Environment Definition**: AI_Foundry_SPA_Frontend" >> $GITHUB_STEP_SUMMARY
  #       echo "- **Environment Type**: dev" >> $GITHUB_STEP_SUMMARY
  #       echo "" >> $GITHUB_STEP_SUMMARY
  #       echo "### üßπ Environment Cleanup" >> $GITHUB_STEP_SUMMARY
  #       echo "‚ö†Ô∏è **Note**: ADE environment \`${{ env.ADE_ENVIRONMENT_NAME }}\` remains active for testing." >> $GITHUB_STEP_SUMMARY
  #       echo "Manual cleanup may be required via ADE portal if automatic cleanup fails." >> $GITHUB_STEP_SUMMARY
  #   
  #   - name: Cleanup ADE Environment
  #     if: always()
  #     run: |
  #       echo "üßπ Cleaning up ADE environment..."
  #       
  #       if [ -n "${{ env.ADE_ENVIRONMENT_NAME }}" ]; then
  #         echo "üóëÔ∏è Deleting ADE environment: ${{ env.ADE_ENVIRONMENT_NAME }}"
  #         
  #         # Attempt to delete the ADE environment
  #         az devcenter dev environment delete \
  #           --dev-center-name "devcenter-eus-dev" \
  #           --project-name "ai-foundry" \
  #           --name "${{ env.ADE_ENVIRONMENT_NAME }}" \
  #           --yes \
  #           --no-wait || echo "‚ö†Ô∏è Failed to delete ADE environment (may require manual cleanup)"
  #         
  #         echo "‚úÖ ADE environment cleanup initiated"
  #       else
  #         echo "‚ÑπÔ∏è No ADE environment to clean up"
  #       fi

  # deploy-ade-backend:
  #   name: Deploy ADE Backend
  #   runs-on: ubuntu-latest
  #   needs: [bicep-validation, backend-build]
  #   if: false  # Explicitly disabled - change to enable ADE deployment
  #   # Original condition: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4
  #     
  #   - name: Download backend artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: backend-publish
  #       path: ./
  #       
  #   - name: Azure CLI Login
  #     uses: azure/login@v2
  #     with:
  #       creds: ${{ secrets.AZURE_CREDENTIALS }}
  #   
  #   - name: Install PowerShell
  #     run: |
  #       # PowerShell should already be available in Ubuntu, but ensure it's working
  #       pwsh --version || echo "PowerShell not available - using system default"
  #   
  #   - name: Create ADE Environment
  #     id: create-ade
  #     run: |
  #       echo "üöÄ Creating ADE environment for backend deployment..."
  #       
  #       # Generate unique environment name
  #       ADE_ENV_NAME="cicd-backend-${{ github.run_number }}"
  #       echo "ADE_ENVIRONMENT_NAME=$ADE_ENV_NAME" >> $GITHUB_ENV
  #       
  #       # Create ADE environment
  #       echo "üì¶ Deploying ADE environment: $ADE_ENV_NAME"
  #       az devcenter dev environment create \
  #         --dev-center-name "devcenter-eus-dev" \
  #         --project-name "ai-foundry" \
  #         --catalog-name "ai-in-abox-infrastructure" \
  #         --environment-definition-name "AI_Foundry_SPA_Backend" \
  #         --environment-type "dev" \
  #         --name "$ADE_ENV_NAME" \
  #         --parameters infra/environments/backend/ade.parameters.json \
  #         --no-wait
  #       
  #       echo "‚è≥ Waiting for ADE environment deployment to complete..."
  #       
  #       # Wait for deployment to complete (timeout after 10 minutes)
  #       timeout=600
  #       elapsed=0
  #       while [ $elapsed -lt $timeout ]; do
  #         status=$(az devcenter dev environment show \
  #           --dev-center-name "devcenter-eus-dev" \
  #           --project-name "ai-foundry" \
  #           --name "$ADE_ENV_NAME" \
  #           --query "provisioningState" \
  #           --output tsv || echo "NotFound")
  #         
  #         echo "üîç Environment status: $status (${elapsed}s elapsed)"
  #         
  #         if [ "$status" = "Succeeded" ]; then
  #           echo "‚úÖ ADE environment deployed successfully!"
  #           break
  #         elif [ "$status" = "Failed" ]; then
  #           echo "‚ùå ADE environment deployment failed!"
  #           exit 1
  #         fi
  #         
  #         sleep 30
  #         elapsed=$((elapsed + 30))
  #       done
  #       
  #       if [ $elapsed -ge $timeout ]; then
  #         echo "‚ùå ADE environment deployment timed out after 10 minutes!"
  #         exit 1
  #       fi
  #   
  #   - name: Extract ADE Outputs
  #     id: extract-outputs
  #     run: |
  #       echo "üìã Extracting outputs from ADE environment..."
  #       
  #       # Get environment details
  #       ENV_DETAILS=$(az devcenter dev environment show \
  #         --dev-center-name "devcenter-eus-dev" \
  #         --project-name "ai-foundry" \
  #         --name "${{ env.ADE_ENVIRONMENT_NAME }}" \
  #         --output json)
  #       
  #       # Construct resource group name using ADE naming convention: {project}-{adeName}
  #       # Based on ade.parameters.json: devCenterProjectName + "-" + adeName
  #       RESOURCE_GROUP="ai-foundry-${{ env.ADE_ENVIRONMENT_NAME }}"
  #       echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP" >> $GITHUB_ENV
  #       
  #       echo "üîç Querying resources directly from resource group: $RESOURCE_GROUP"
  #       
  #       # Find Function App by resource type (more reliable than deployment outputs)
  #       FUNCTION_APP_NAME=$(az functionapp list \
  #         --resource-group "$RESOURCE_GROUP" \
  #         --query "[0].name" \
  #         --output tsv)
  #       
  #       if [ -z "$FUNCTION_APP_NAME" ] || [ "$FUNCTION_APP_NAME" = "null" ]; then
  #         echo "‚ùå No Function App found in resource group: $RESOURCE_GROUP"
  #         echo "üîç Available resources:"
  #         az resource list --resource-group "$RESOURCE_GROUP" --output table
  #         exit 1
  #       fi
  #       
  #       echo "üì¶ Found Function App: $FUNCTION_APP_NAME"
  #       
  #       # Get Function App URL directly from the resource
  #       FUNCTION_APP_HOSTNAME=$(az functionapp show \
  #         --name "$FUNCTION_APP_NAME" \
  #         --resource-group "$RESOURCE_GROUP" \
  #         --query "defaultHostName" \
  #         --output tsv)
  #       
  #       if [ -z "$FUNCTION_APP_HOSTNAME" ] || [ "$FUNCTION_APP_HOSTNAME" = "null" ]; then
  #         echo "‚ùå Failed to get Function App hostname"
  #         exit 1
  #       fi
  #       
  #       FUNCTION_APP_URL="https://$FUNCTION_APP_HOSTNAME"
  #       
  #       # Validate URLs are not empty
  #       if [ -z "$FUNCTION_APP_URL" ] || [ "$FUNCTION_APP_URL" = "https://" ] || [ "$FUNCTION_APP_URL" = "null" ]; then
  #         echo "‚ùå Invalid or empty Function App URL: '$FUNCTION_APP_URL'"
  #         exit 1
  #       fi
  #       
  #       if [ -z "$FUNCTION_APP_NAME" ] || [ "$FUNCTION_APP_NAME" = "null" ]; then
  #         echo "‚ùå Invalid or empty Function App Name: '$FUNCTION_APP_NAME'"
  #         exit 1
  #       fi
  #       
  #       echo "üìã Reading AI Foundry configuration from ade.parameters.json..."
  #       
  #       # Use the reusable helper script to extract AI Foundry parameters
  #       echo "üîß Using extract-ade-parameters.sh helper script..."
  #       
  #       # Extract parameters using the helper script
  #       if ! PARAMETER_OUTPUT=$(./tests/utilities/extract-ade-parameters.sh -o export -q); then
  #           echo "‚ùå Failed to extract AI Foundry parameters from ade.parameters.json"
  #           echo "Please check that all required parameters are present and valid."
  #           exit 1
  #       fi
  #       
  #       # Source the extracted parameters into environment
  #       eval "$PARAMETER_OUTPUT"
  #       
  #       # Set environment variables for standard ADE outputs
  #       echo "FUNCTION_APP_NAME=$FUNCTION_APP_NAME" >> $GITHUB_ENV
  #       echo "FUNCTION_APP_URL=$FUNCTION_APP_URL" >> $GITHUB_ENV
  #       
  #       # Set environment variables for AI Foundry configuration
  #       echo "AI_FOUNDRY_ENDPOINT=$AI_FOUNDRY_ENDPOINT" >> $GITHUB_ENV
  #       echo "AI_FOUNDRY_AGENT_ID=$AI_FOUNDRY_AGENT_ID" >> $GITHUB_ENV
  #       echo "AI_FOUNDRY_AGENT_NAME=$AI_FOUNDRY_AGENT_NAME" >> $GITHUB_ENV
  #       echo "AI_FOUNDRY_INSTANCE_NAME=$AI_FOUNDRY_INSTANCE_NAME" >> $GITHUB_ENV
  #       echo "AI_FOUNDRY_RG_NAME=$AI_FOUNDRY_RG_NAME" >> $GITHUB_ENV
  #       
  #       echo "‚úÖ Successfully extracted resources and AI Foundry configuration:"
  #       echo "  - Resource Group: $RESOURCE_GROUP"
  #       echo "  - Function App: $FUNCTION_APP_NAME"
  #       echo "  - Function App URL: $FUNCTION_APP_URL"
  #       echo "  - AI Foundry Endpoint: $AI_FOUNDRY_ENDPOINT"
  #       echo "  - AI Foundry Agent: $AI_FOUNDRY_AGENT_NAME ($AI_FOUNDRY_AGENT_ID)"
  #       echo "  - AI Foundry Instance: $AI_FOUNDRY_INSTANCE_NAME"
  #   
  #   - name: Deploy Backend Code to Function App
  #     run: |
  #       echo "üöÄ Deploying backend code to Function App..."
  #       
  #       # Use the pre-packaged deployment zip file
  #       # The zip was created during build to preserve .azurefunctions directory
  #       echo "üìã Verifying deployment package contents:"
  #       unzip -l backend-deployment.zip | grep -E "\.azurefunctions|azurefunctions/" || echo "‚ö†Ô∏è  .azurefunctions directory not found in package"
  #       
  #       echo "üì¶ Deploying backend code to ${{ env.FUNCTION_APP_NAME }}..."
  #       az functionapp deployment source config-zip \
  #         --resource-group "${{ env.RESOURCE_GROUP_NAME }}" \
  #         --name "${{ env.FUNCTION_APP_NAME }}" \
  #         --src "backend-deployment.zip"
  #       
  #       echo "‚úÖ Backend code deployed successfully!"
  #   
  #   - name: Test Function App Endpoints
  #     run: |
  #       echo "üß™ Testing Function App endpoints..."
  #       
  #       # Wait a moment for the deployment to fully complete
  #       sleep 30
  #       
  #       # Test health endpoint with retry logic
  #       echo "üè• Testing Health Endpoint with retry logic..."
  #       max_attempts=10
  #       attempt=1
  #       health_passed=false
  #       
  #       while [ $attempt -le $max_attempts ]; do
  #         echo "üîç Health check attempt $attempt/$max_attempts..."
  #         
  #         if curl -f -s "${{ env.FUNCTION_APP_URL }}/api/health" -o /dev/null; then
  #           echo "‚úÖ Health endpoint responding!"
  #           health_passed=true
  #           break
  #         else
  #           echo "‚è≥ Health endpoint not ready yet (attempt $attempt/$max_attempts)..."
  #           if [ $attempt -lt $max_attempts ]; then
  #             sleep 30
  #           fi
  #         fi
  #         
  #         attempt=$((attempt + 1))
  #       done
  #       
  #       if [ "$health_passed" = false ]; then
  #         echo "‚ùå Health endpoint failed after $max_attempts attempts"
  #         exit 1
  #       fi
  #       
  #       # Test comprehensive endpoints using PowerShell script
  #       echo "üß™ Running comprehensive endpoint tests..."
  #       pwsh -File tests/core/Test-FunctionEndpoints.ps1 -BaseUrl "${{ env.FUNCTION_APP_URL }}" -HealthOnly
  #       
  #       if [ $? -eq 0 ]; then
  #         echo "‚úÖ Health endpoint tests passed!"
  #       else
  #         echo "‚ùå Health endpoint tests failed!"
  #         exit 1
  #       fi
  #       
  #       # Test AI Foundry integration (if health passes)
  #       echo "ü§ñ Testing AI Foundry integration..."
  #       pwsh -File tests/core/Test-FunctionEndpoints.ps1 -BaseUrl "${{ env.FUNCTION_APP_URL }}" -AiFoundryOnly
  #       
  #       ai_result=$?
  #       if [ $ai_result -eq 0 ]; then
  #         echo "‚úÖ AI Foundry integration tests passed!"
  #       elif [ $ai_result -eq 2 ]; then
  #         echo "‚ö†Ô∏è AI Foundry integration tests failed - this may be expected in CI environment"
  #         echo "    (Missing AI Foundry configuration or permissions)"
  #       else
  #         echo "‚ùå AI Foundry integration tests failed with unexpected error"
  #         exit 1
  #       fi
  #       
  #       echo "‚úÖ Function App deployment and testing completed successfully!"
  #   
  #   - name: Deployment Success
  #     run: |
  #       echo "‚úÖ Backend code deployed successfully!"
  #       echo "üîó Function App URL: ${{ env.FUNCTION_APP_URL }}"
  #   
  #   - name: ADE Deployment Summary
  #     run: |
  #       echo "## üöÄ ADE Backend Deployment Summary" >> $GITHUB_STEP_SUMMARY
  #       echo "" >> $GITHUB_STEP_SUMMARY
  #       echo "### ‚úÖ Deployment Successful" >> $GITHUB_STEP_SUMMARY
  #       echo "- **ADE Environment**: \`${{ env.ADE_ENVIRONMENT_NAME }}\`" >> $GITHUB_STEP_SUMMARY
  #       echo "- **Resource Group**: \`${{ env.RESOURCE_GROUP_NAME }}\`" >> $GITHUB_STEP_SUMMARY
  #       echo "- **Function App**: \`${{ env.FUNCTION_APP_NAME }}\`" >> $GITHUB_STEP_SUMMARY
  #       echo "- **Function App URL**: [${{ env.FUNCTION_APP_URL }}](${{ env.FUNCTION_APP_URL }})" >> $GITHUB_STEP_SUMMARY
  #       echo "" >> $GITHUB_STEP_SUMMARY
  #       echo "### üîß ADE Configuration Used" >> $GITHUB_STEP_SUMMARY
  #       echo "- **DevCenter**: devcenter-eus-dev" >> $GITHUB_STEP_SUMMARY
  #       echo "- **Project**: ai-foundry" >> $GITHUB_STEP_SUMMARY
  #       echo "- **Catalog**: ai-in-abox-infrastructure" >> $GITHUB_STEP_SUMMARY
  #       echo "- **Environment Definition**: AI_Foundry_SPA_Backend" >> $GITHUB_STEP_SUMMARY
  #       echo "- **Environment Type**: dev" >> $GITHUB_STEP_SUMMARY
  #       echo "" >> $GITHUB_STEP_SUMMARY
  #       echo "### üßπ Environment Cleanup" >> $GITHUB_STEP_SUMMARY
  #       echo "‚ö†Ô∏è **Note**: ADE environment \`${{ env.ADE_ENVIRONMENT_NAME }}\` remains active for testing." >> $GITHUB_STEP_SUMMARY
  #       echo "Manual cleanup may be required via ADE portal if automatic cleanup fails." >> $GITHUB_STEP_SUMMARY
  #   
  #   - name: Cleanup ADE Environment
  #     if: always()
  #     run: |
  #       echo "üßπ Cleaning up ADE environment..."
  #       
  #       if [ -n "${{ env.ADE_ENVIRONMENT_NAME }}" ]; then
  #         echo "üóëÔ∏è Deleting ADE environment: ${{ env.ADE_ENVIRONMENT_NAME }}"
  #         
  #         # Attempt to delete the ADE environment
  #         az devcenter dev environment delete \
  #           --dev-center-name "devcenter-eus-dev" \
  #           --project-name "ai-foundry" \
  #           --name "${{ env.ADE_ENVIRONMENT_NAME }}" \
  #           --yes \
  #           --no-wait || echo "‚ö†Ô∏è Failed to delete ADE environment (may require manual cleanup)"
  #         
  #         echo "‚úÖ ADE environment cleanup initiated"
  #       else
  #         echo "‚ÑπÔ∏è No ADE environment to clean up"
  #       fi

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [bicep-validation, frontend-build, backend-build, deploy-dev-infrastructure, deploy-backend-code, deploy-frontend-code]
    if: always()
    
    steps:
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: ./artifacts/frontend/
        
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-publish
        path: ./artifacts/backend/
        
    - name: Display build summary
      run: |
        echo "## üèóÔ∏è Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Bicep validation summary
        if [ "${{ needs.bicep-validation.result }}" = "success" ]; then
          echo "### ‚úÖ Bicep Infrastructure Validation Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Templates validated**: Main orchestrator, Backend environment, Frontend environment" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation scope**: Syntax, parameters, dependencies, RBAC" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Bicep Infrastructure Validation Failed" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.bicep-validation.result }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Frontend summary
        if [ -d "./artifacts/frontend" ]; then
          echo "### ‚úÖ Frontend Build Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Build output**: $(du -sh ./artifacts/frontend | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Files**: $(find ./artifacts/frontend -type f | wc -l) files generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Frontend Build Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Backend summary
        if [ -d "./artifacts/backend" ]; then
          echo "### ‚úÖ Backend Build Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Build output**: $(du -sh ./artifacts/backend | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Files**: $(find ./artifacts/backend -type f | wc -l) files generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Backend Build Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Infrastructure deployment summary (only shows on main branch pushes)
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
          if [ "${{ needs.deploy-dev-infrastructure.result }}" = "success" ]; then
            echo "### ‚úÖ Dev Infrastructure Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: Infrastructure deployed via Azure CLI + Bicep" >> $GITHUB_STEP_SUMMARY
            echo "- **Environment**: dev (eastus2)" >> $GITHUB_STEP_SUMMARY
            echo "- **Template**: main-orchestrator.bicep" >> $GITHUB_STEP_SUMMARY
            echo "- **Parameters**: dev-orchestrator.parameters.bicepparam" >> $GITHUB_STEP_SUMMARY
            echo "- **Scope**: Subscription-level deployment to multiple resource groups" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-dev-infrastructure.result }}" = "failure" ]; then
            echo "### ‚ùå Dev Infrastructure Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ${{ needs.deploy-dev-infrastructure.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Note**: Check job logs for detailed error information" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-dev-infrastructure.result }}" = "skipped" ]; then
            echo "### ‚è≠Ô∏è Dev Infrastructure Deployment Skipped" >> $GITHUB_STEP_SUMMARY
            echo "- **Reason**: Infrastructure deployment only runs on main branch pushes" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Backend code deployment summary
          if [ "${{ needs.deploy-backend-code.result }}" = "success" ]; then
            echo "### ‚úÖ Backend Code Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: Backend Function App code deployed in parallel with frontend" >> $GITHUB_STEP_SUMMARY
            echo "- **Method**: Azure/functions-action@v1 (Native GitHub Action)" >> $GITHUB_STEP_SUMMARY
            echo "- **Dependency**: Triggered after successful infrastructure deployment" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-backend-code.result }}" = "failure" ]; then
            echo "### ‚ùå Backend Code Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ${{ needs.deploy-backend-code.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Note**: Check job logs for detailed error information" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-backend-code.result }}" = "skipped" ]; then
            echo "### ‚è≠Ô∏è Backend Code Deployment Skipped" >> $GITHUB_STEP_SUMMARY
            echo "- **Reason**: Skipped due to infrastructure deployment failure or not on main branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Frontend code deployment summary  
          if [ "${{ needs.deploy-frontend-code.result }}" = "success" ]; then
            echo "### ‚úÖ Frontend Code Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: Frontend Static Web App code deployed in parallel with backend" >> $GITHUB_STEP_SUMMARY
            echo "- **Method**: Azure CLI + SWA CLI (Native Azure Commands)" >> $GITHUB_STEP_SUMMARY
            echo "- **Dependency**: Triggered after successful infrastructure deployment" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-frontend-code.result }}" = "failure" ]; then
            echo "### ‚ùå Frontend Code Deployment Failed" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ${{ needs.deploy-frontend-code.result }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Note**: Check job logs for detailed error information" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-frontend-code.result }}" = "skipped" ]; then
            echo "### ‚è≠Ô∏è Frontend Code Deployment Skipped" >> $GITHUB_STEP_SUMMARY
            echo "- **Reason**: Skipped due to infrastructure deployment failure or not on main branch" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### üìã Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Review build artifacts if needed" >> $GITHUB_STEP_SUMMARY
        echo "- Run local tests: \`npm test\` (frontend) and \`dotnet test\` (backend)" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "- **Automated Deployment**: Infrastructure and application code deployed automatically using native GitHub Actions (Backend and Frontend in parallel)" >> $GITHUB_STEP_SUMMARY
          echo "- **Local Development**: Use deployment scripts in \`deploy-scripts/\` for local testing only" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Local Development**: Use deployment scripts in \`deploy-scripts/\` for local testing only" >> $GITHUB_STEP_SUMMARY
          echo "- **Note**: Automated deployment using native GitHub Actions only runs on main branch pushes (Backend and Frontend in parallel)" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Check build status
      run: |
        # Base build requirements (always checked)
        base_success=true
        if [ "${{ needs.bicep-validation.result }}" != "success" ]; then
          base_success=false
        fi
        if [ "${{ needs.frontend-build.result }}" != "success" ]; then
          base_success=false
        fi
        if [ "${{ needs.backend-build.result }}" != "success" ]; then
          base_success=false
        fi
        
        # Infrastructure deployment check (only on main branch pushes)
        infrastructure_success=true
        backend_deploy_success=true
        frontend_deploy_success=true
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
          if [ "${{ needs.deploy-dev-infrastructure.result }}" != "success" ]; then
            infrastructure_success=false
          fi
          if [ "${{ needs.deploy-backend-code.result }}" != "success" ]; then
            backend_deploy_success=false
          fi
          if [ "${{ needs.deploy-frontend-code.result }}" != "success" ]; then
            frontend_deploy_success=false
          fi
        fi
        
        if [ "$base_success" = "true" ] && [ "$infrastructure_success" = "true" ] && [ "$backend_deploy_success" = "true" ] && [ "$frontend_deploy_success" = "true" ]; then
          echo "‚úÖ All builds, validations, and deployments completed successfully!"
          exit 0
        else
          echo "‚ùå One or more jobs failed:"
          echo "Bicep Validation: ${{ needs.bicep-validation.result }}"
          echo "Frontend Build: ${{ needs.frontend-build.result }}"
          echo "Backend Build: ${{ needs.backend-build.result }}"
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "Dev Infrastructure Deployment: ${{ needs.deploy-dev-infrastructure.result }}"
            echo "Backend Code Deployment: ${{ needs.deploy-backend-code.result }}"
            echo "Frontend Code Deployment: ${{ needs.deploy-frontend-code.result }}"
          fi
          exit 1
        fi
